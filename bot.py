import telebot
import numpy as np
import librosa
import os
import subprocess
from tensorflow.keras.models import load_model

# üîê –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7424010381:AAF1_4x5XJpUj7V_d0KgmbZynggT7bJqxvg"
bot = telebot.TeleBot(TOKEN)

# üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = load_model("speaker_classifier.keras")

# üåø –ö–ª–∞—Å—Å—ã
labels = {0: "speaker1", 1: "speaker2", 2: "speaker3"}

@bot.message_handler(content_types=['text'])
def greet_user(message):
    if message.text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–Ω–∞—á–∞—Ç—å", "/start"]:
        bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ.")

@bot.message_handler(content_types=['voice', 'audio'])
def handle_voice(message):
    try:
        file_info = bot.get_file(message.voice.file_id if message.content_type == 'voice' else message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        input_path = "input.ogg" if message.content_type == 'voice' else "input.mp3"
        with open(input_path, 'wb') as f:
            f.write(downloaded_file)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ .wav
        wav_path = "input.wav"
        if not input_path.endswith(".wav"):
            subprocess.call(['ffmpeg', '-y', '-i', input_path, wav_path])
        else:
            wav_path = input_path

        # MFCC
        y, sr = librosa.load(wav_path, sr=16000)
        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13).T
        mfcc = mfcc[:348] if mfcc.shape[0] > 348 else np.pad(mfcc, ((0, 348 - mfcc.shape[0]), (0, 0)))
        mfcc = np.expand_dims(mfcc, axis=0)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        pred = model.predict(mfcc)
        print(pred)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        confidence = np.max(pred)
        if confidence < 0.6:
            bot.reply_to(message, "üîç –ì–æ–≤–æ—Ä—è—â–∏–π –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª.")
        else:
            speaker = labels[np.argmax(pred)]
            bot.reply_to(message, f"üé§ –ì–æ–≤–æ—Ä—è—â–∏–π: {speaker}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫
bot.polling()
